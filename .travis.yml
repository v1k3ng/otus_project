dist: xenial
sudo: required
services:
- docker
language: python
python:
- '3.6'
before_install:
- openssl aes-256-cbc -K $encrypted_52e387fa8e99_key -iv $encrypted_52e387fa8e99_iv
  -in credentials-docker.json.enc -out credentials-docker.json -d
install:
# install kubectl
- curl -LO https://storage.googleapis.com/kubernetes-release/release/$(curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt)/bin/linux/amd64/kubectl
- chmod +x ./kubectl
- sudo mv ./kubectl /usr/local/bin/kubectl
# install google-cloud-sdk
- echo "deb [signed-by=/usr/share/keyrings/cloud.google.gpg] http://packages.cloud.google.com/apt
  cloud-sdk main" | sudo tee -a /etc/apt/sources.list.d/google-cloud-sdk.list
- curl https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo apt-key --keyring
  /usr/share/keyrings/cloud.google.gpg add -
- sudo apt-get update && sudo apt-get install --allow-unauthenticated --ignore-missing google-cloud-sdk
# install requirements for crawler
- cd docker/search_engine_crawler
- pip3 install -r requirements.txt -r requirements-test.txt
# install requirements for ui
- cd ../search_engine_ui
- pip3 install -r requirements.txt -r requirements-test.txt
script:
# test ui
- python3 -m unittest discover -s tests/
- coverage run -m unittest discover -s tests/
- coverage report --include ui/ui.py
# test crawler
- cd ../search_engine_crawler
- python3 -m unittest discover -s tests/
- coverage run -m unittest discover -s tests/
- coverage report --include crawler/crawler.py
# create docker images and push they to docker hub
- cd ../
- bash createandpush.sh
# gcloud auth and config
- cd ../
- gcloud auth activate-service-account --key-file credentials-docker.json
- gcloud container clusters get-credentials k8s-1 --zone=$gce_zone --project=$gce_project
# deploy app
# - echo $TRAVIS_BRANCH
# - echo $TRAVIS_EVENT_TYPE
# - echo $TRAVIS_PULL_REQUEST
# - echo $TRAVIS_PULL_REQUEST_BRANCH
- bash deploy_app/deploy-app.sh
notifications:
  slack:
    rooms:
      secure: JnSbZuQ8fPU19IlN1ecqul6YmwH63McI4EkvUUncyf3bkJoLW46HgE6JrdiVWUT4jBPsagU5ikyXxo+QhmT2NYWVDc8tDiabXWuvge4B7YS7nExCRoJAjeE6505duLhBzfaf2eKNIwQrMqdOZjT5tTh8jbtY/w6/9Njue3xq7cKVXQfxG5pM8qFU/tT+amJnuPIR9hOcNvA2K3rD9VNo+T2ykgRodor2gqDKpHwr4kXXMSDy5fbFegUIULHgHh7GzDbWdT3abg3Nl/RvMQKcUepEyoqZz2YVK/UHstFkj6r+b/q7yxYdCJngU1ci+040DOqGU2ZMyLYQSiOymCKzQCm507qfszxQ5exJm+Xl8jvKGWXRVJvTeNU4d+3NKrjaxP1REb7pN8C9VjavpQ2nfa9fgLo9Qj+xYDC0wd8i9LiFuVMc9wttZjhj6ofJTMTdFQ7wmNJjvxpjPyvNl/UNMyTkGUKhYgkz5u9wJnAOwisYU45tmDO5BRueSe/7OAqad9Ng3m4XUtqaSj16kkVyPvOE7Z6esxXEQLxVEWhC/sZh6Frorv3aEmIhHyxlYpFg1HLL+y6Th4RabwaGqZ1drMTVHKp+1d+HIZu+yj9F7HuU5hxbNFON5cdrhKP5Nc+dXgj6fcq/ZQ8NCiJGqwJKXa5h2XjSAHPVa5qZ8tkzXUI=
